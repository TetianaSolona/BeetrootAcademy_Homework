Python (: ; в русском языке встречаются названия пито́н или па́йтон) —  общего назначения с   типизацией и автоматическим управлением памятью, ориентированный на повышение производительности разработчика, читаемости кода и его качества, а также на обеспечение переносимости написанных на нём программ. Язык является полностью объектно-ориентированным в том плане, что всё является объектами. Необычной особенностью языка является выделение блоков кода пробельными отступами.  ядра языка минималистичен, за счёт чего на практике редко возникает необходимость обращаться к документации. Сам же язык известен как интерпретируемый и используется в том числе для написания скриптов. Недостатками языка являются зачастую более низкая скорость работы и более высокое потребление памяти написанных на нём программ по сравнению с аналогичным кодом, написанным на компилируемых языках, таких как  или .
Python является , поддерживающим , , ,  программирование,  и  программирование. Задачи  решаются за счёт динамической типизации.  частично поддерживается через декораторы, более полноценная поддержка обеспечивается дополнительными . Такие методики как  и  можно реализовать с помощью библиотек или расширений. Основные архитектурные черты — , , , механизм , поддержка  с глобальной блокировкой интерпретатора (), высокоуровневые . Поддерживается разбиение программ на , которые, в свою очередь, могут объединяться в пакеты.
Эталонной реализацией Python является интерпретатор , поддерживающий большинство активно используемых платформ и являющийся  языка. Он распространяется под  , позволяющей использовать его без ограничений в любых приложениях, включая . CPython компилирует исходные тексты в высокоуровневый , который исполняется в стековой виртуальной машине. К другим трём основным реализациям языка относятся  (для ),  (для /) и . PyPy написан на подмножестве языка Python (RPython) и разрабатывался как альтернатива CPython с целью повышения скорости исполнения программ, в том числе за счёт использования . Поддержка версии Python 2 закончилась в 2020 году. На текущий момент активно развивается версия языка Python 3. Разработка языка ведётся через предложения по расширению языка PEP ( ), в которых описываются нововведения, делаются корректировки согласно обратной связи от сообщества и документируются итоговые решения.
 включает большой набор полезных переносимых функций, начиная от функционала для работы с текстом и заканчивая средствами для написания сетевых приложений. Дополнительные возможности, такие как математическое моделирование, работа с оборудованием, написание веб-приложений или разработка игр, могут реализовываться посредством обширного количества сторонних библиотек, а также интеграцией библиотек, написанных на Си или C++, при этом и сам интерпретатор Python может интегрироваться в проекты, написанные на этих языках. Существует и специализированный  программного обеспечения, написанного на Python, — . Данный репозиторий предоставляет средства для простой установки пакетов в операционную систему и стал стандартом де-факто для Python. По состоянию на 2019 год в нём содержалось более 175 тысяч пакетов.
Python стал одним из самых популярных языков, он используется в анализе данных, ,  и , а также в других сферах, включая разработку игр. За счёт читабельности, простого синтаксиса и отсутствия необходимости в компиляции язык хорошо подходит для обучения программированию, позволяя концентрироваться на изучении алгоритмов, концептов и парадигм. Отладка же и экспериментирование в значительной степени облегчаются тем фактом, что язык является интерпретируемым. Применяется язык многими крупными компаниями, такими как  или . По состоянию на октябрь 2021 года Python занимает первое место в  популярности языков программирования с показателем 11,27%. «Языком года» по версии TIOBE Python объявлялся в 2007, 2010, 2018 и 2020 годах.
Задумка по реализации языка появилась в конце , а разработка его реализации началась в 1989 году сотрудником голландского института  . Для распределённой операционной системы  требовался расширяемый , и Гвидо начал разрабатывать Python на досуге, позаимствовав некоторые наработки для языка  (Гвидо участвовал в разработке этого языка, ориентированного на обучение программированию). В феврале  Гвидо опубликовал исходный текст в  alt.sources. С самого начала Python проектировался как .
Гвидо ван Россум назвал язык в честь популярного британского комедийного телешоу  «», поскольку автор был поклонником этого телешоу, как и многие другие разработчики того времени, а в самом шоу прослеживалась некая параллель с миром компьютерной техники.
Наличие дружелюбного, отзывчивого сообщества пользователей считается, наряду с дизайнерской интуицией Гвидо, одним из факторов успеха Python. Развитие языка происходит согласно чётко регламентированному процессу создания, обсуждения, отбора и реализации документов PEP ( ) — предложений по развитию Python.
 , после длительного тестирования, вышла первая версия Python 3000 (или Python 3.0, также используется  Py3k). В Python 3000 устранены многие недостатки архитектуры с максимально возможным (но не полным) сохранением совместимости со старыми версиями Python.
Дата окончания срока поддержки Python 2.7 первоначально была установлена на 2015 год, а затем перенесена на 2020 год из опасения, что большая часть существующего кода не может быть легко перенесена на Python 3. Поддержка Python 2 была направлена лишь на уже существующие проекты, новые проекты должны были использовать Python 3. Больше никаких исправлений безопасности или других улучшений для Python 2.7 не будет выпущено. С окончанием срока службы Python 2.x поддерживаются только Python 3.6.x и более поздние версии.
Язык использует  вместе с  и циклический  для . Также есть динамические  (), которые связывают имена методов и переменных во время выполнения программы.
Python предлагает поддержку функционального программирования в традициях . Так, в Python есть функции filter, map и reduce; также из Лиспа были заимствованы понятия ,  (словарей),  и генераторов списков. Стандартная библиотека содержит два модуля (itertools и functools), реализующие инструменты, заимствованные из  и .

Разработчики языка Python придерживаются определённой философии программирования, называемой «The Zen of Python» (« Пито́на», или «Дзен Па́йтона»). Её текст выдаётся  Python по команде import this (работает один раз за сессию). Автором этой философии считается  (Tim Peters).

Философия начинается так:
….
...
Вместо того, чтобы встроить в ядро Python всю функциональность языка, он был спроектирован таким образом, чтобы быть легко расширяемым. Это сделало язык популярным средством добавления программируемых интерфейсов к существующим приложениям. Видение Гвидо Ван Россума маленького ядра с большой стандартной библиотекой и легко расширяемым интерпретатором проистекало из негативного опыта разработки языка , который придерживался противоположного подхода.
Python стремится к более простому, менее громоздкому синтаксису и грамматике, предоставляя разработчикам выбор в их методологии кодирования. В отличие от девиза  «», Python придерживается философии «должен существовать один — и, желательно, только один — очевидный способ сделать это». , член , и автор книг по Python пишет, что «Описывать что-то как „умное“ не считается комплиментом в культуре Python».
Разработчики Python стремятся избежать преждевременной оптимизации и отвергают патчи к некритическим частям эталонной реализации , которые могли бы предложить незначительное увеличение скорости за счёт понятности кода. Однако есть способы повышения производительности. Если в программе есть узкие места, связанные с выполнением ресурсоёмких операций на центральном процессоре, но не связанные с использованием операций ввода-вывода, то повысить производительность возможно за счёт трансляции программы при помощи  в язык Си и последующей компиляции. Требовательные к вычислительным ресурсам части программы также можно переписывать на язык Си и подключать как отдельные библиотеки с привязками к Python.
Важная цель разработчиков Python — делать его забавным для использования. Это было отражено в названии языка, данном в честь . Также это отражено в иногда игривом подходе к обучающим программам и справочным материалам, таким как примеры программ из документаций, которые используют названия spam и eggs вместо использующихся в документации множества других языков foo и bar.
Python  и работает почти на всех известных платформах — от  до . Существуют порты под , практически под все варианты  (включая  и ), , ,  и ,  2.0 и выше, , , , , , , ,  и .
По мере устаревания платформы её поддержка в основной ветви языка прекращается. Например, с версии 2.6 прекращена поддержка ,  и . В версии 3.5 перестала поддерживаться  В версии 3.9 перестала поддерживаться  и .
При этом, в отличие от многих портируемых систем, для всех основных платформ Python имеет поддержку характерных для данной платформы технологий (например, Microsoft /). Более того, существует специальная версия Python для  — , что позволяет интерпретатору выполняться на любой системе, поддерживающей , при этом классы  могут непосредственно использоваться из Python и даже быть написанными на Python. Также несколько проектов обеспечивают интеграцию с платформой , основные из которых —  и .
Python поддерживает , то есть тип переменной определяется только во время исполнения. Поэтому вместо «присваивания значения переменной» лучше говорить о «связывании значения с некоторым именем». К примитивным типам в Python относятся , целое число произвольной точности, число  и . Из контейнерных типов в Python встроены: , , ,  и . Все значения являются объектами, в том числе функции, методы, модули, классы.
Добавить новый тип можно либо написав  (class), либо определив новый тип в модуле расширения (например, написанном на языке C). Система классов поддерживает  (одиночное и ) и . Возможно наследование от большинства встроенных типов и типов расширений.

Язык обладает чётким и последовательным синтаксисом, продуманной модульностью и , благодаря чему исходный код написанных на Python программ легко читаем. При передаче аргументов в функции Python использует  ().
Набор операторов достаточно традиционен.
Одной из интересных синтаксических особенностей языка является выделение  кода с помощью отступов (пробелов или табуляций), поэтому в Python отсутствуют  begin/end, как в языке , или фигурные скобки, как в . Такой «трюк» позволяет сократить количество строк и символов в программе и приучает к «хорошему» стилю программирования. С другой стороны, поведение и даже корректность программы может зависеть от начальных пробелов в тексте. Тем, кто привык программировать на языках с явным выделением начала и конца блоков, такое поведение поначалу может показаться неинтуитивным и неудобным.
Сам Гвидо писал:


Наверное, самой спорной особенностью Python является использование отступов для группировки операторов, что взято непосредственно из . Это одна из особенностей языка, которая дорога моему сердцу. Это делает код Python более читабельным двумя способами. Во-первых, использование отступов уменьшает визуальное нагромождение и делает программы короче, тем самым сокращая объем внимания, необходимого для восприятия базовой единицы кода. Во-вторых, это даёт программисту меньше свободы в форматировании, тем самым делая возможным более единообразный стиль, что облегчает чтение чужого кода. (Сравните, например,  о размещении фигурных скобок в , каждое из которых имеет сильных сторонников).
Состав, синтаксис, ассоциативность и приоритет операций достаточно привычны для языков программирования и призваны минимизировать употребление скобок. Если сравнивать с математикой, то приоритеты операторов зеркалируют соответствующие в математике, при этом оператор присвоения значения = соответствует типографскому ←. Хотя приоритеты операций позволяют не использовать скобки во многих случаях, на анализ больших выражений может тратиться лишнее время, в результате чего в таких случаях выгоднее явно расставлять скобки.
Отдельно стоит упомянуть операцию форматирования для строк (работает по аналогии с функцией printf() из Си), которая использует тот же символ, что и взятие остатка от деления:

В версии 3.6 были добавлены форматированные строковые литералы, или f-строки, которые делают код более читаемым и лаконичным:Python имеет удобные цепочечные сравнения. Такие условия в программах — не редкость:
Кроме того, логические операции (or и and) являются : если для вычисления значения операции достаточно первого операнда, этот операнд и является результатом, в противном случае вычисляется второй операнд логической операции. Это основывается на свойствах : например, если один аргумент операции «ИЛИ» (or) является истиной, то и результат этой операции всегда является истиной. В случае, если второй операнд является сложным выражением, это позволяет сократить издержки на его вычисление. Этот факт широко использовался до версии 2.5 вместо условной конструкции:
Встроенные типы данных, как правило, имеют особый синтаксис для своих литералов (записанных в исходном коде констант):
Для списков (и других последовательностей) Python предлагает набор операций над срезами. Особенностью является индексация, которая может показаться новичку странной, но раскрывает свою согласованность по мере использования. Индексы элементов списка начинаются с нуля. Запись среза s[N:M] означает, что в срез попадают все элементы от N включительно до M, не включая. В качестве иллюстрации можно посмотреть . При этом индекс можно не указывать. Например, запись s[:M] означает, что в срез попадают все элементы с самого начала; запись s[N:] означает, что попадают все элементы до конца среза; запись s[:] означает, что попадают все элементы с начала и до конца.
Имя (идентификатор) может начинаться с буквы любого алфавита в  любого регистра или подчёркивания, после чего в имени можно использовать и цифры. В качестве имени нельзя использовать ключевые слова (их список можно узнать по import keyword; print(keyword.kwlist)) и нежелательно переопределять встроенные имена. Имена, начинающиеся с символа подчёркивания, имеют специальное значение.
В каждой точке программы интерпретатор имеет доступ к трём  (то есть отображениям имён в объекты): локальному, глобальному и встроенному.
Области видимости имён могут быть вложенными друг в друга (внутри определяемой функции видны имена из окружающего блока кода). На практике с областями видимости и связыванием имён связано несколько правил «хорошего тона», о которых можно подробнее узнать из документации.
Python предлагает механизм  кода pydoc. В начало каждого модуля, класса, функции вставляется строка документации — . Строки документации остаются в коде на момент времени исполнения, и в язык встроен доступ к документации(переменная __doc__), что используется современными IDE () (например, ).
В интерактивном режиме можно получить помощь, сгенерировать гипертекстовую документацию по целому модулю или даже применить  для автоматического тестирования модуля.
Python — . Полностью поддерживаются , , ,  программирование и . Базовая поддержка  программирования реализуется за счёт метапрограммирования. Множество других методик, в том числе  и  можно реализовать с помощью расширений.
Дизайн языка Python построен вокруг объектно-ориентированной модели программирования. Реализация  в Python является хорошо продуманной, но вместе с тем достаточно специфической по сравнению с другими . В языке всё является объектами — либо экземплярами классов, либо экземплярами метаклассов. Исключением является базовый встроенный метакласс type. Таким образом, классы на самом деле являются экземплярами метаклассов, а производные метаклассы являются экземплярами метакласса type. Метаклассы являются частью концепции метапрограммирования и предоставляют возможность управления наследованием классов, что позволяет создавать абстрактные классы, регистрировать классы или добавлять в них какой-либо программный интерфейс в рамках  или .
Классы по своей сути представляют план или описание того, как создать объект, и хранят в себе описание атрибутов объекта и методов для работы с ним. Парадигма ООП основывается на ,  и . Инкапсуляция в Python представлена возможностью хранения публичных и скрытых  (полей) в объекте с предоставлением  для работы с ними, при этом на самом деле все атрибуты являются публичными, но для пометки скрытых атрибутов существует соглашение об именовании. Наследование позволяет создавать производные объекты без необходимости повторного написания кода, а полиморфизм заключается в возможности переопределения любых методов объекта (в Python все методы являются ), а также в перегрузке  и . Перегрузка методов в Python реализуется за счёт возможности вызова одного и того же метода с разным набором аргументов. Особенностью Python является возможность модифицировать классы после их объявления, добавляя в них новые атрибуты и методы, также можно модифицировать и сами объекты, в результате чего классы могут использоваться как структуры для хранения произвольных данных.
В Python поддерживается множественное наследование. Само по себе множественное наследование является сложным, и его реализации сталкиваются с проблемами разрешения коллизий имён между родительскими классами и с возможным повторным наследованием от одного и того же класса в иерархии. В Python методы вызываются согласно порядку разрешения методов (MRO), который основан на алгоритме , в обычных случаях при написании программ не требуется знать принцип работы данного алгоритма, понимание же может потребоваться при создании нетривиальных иерархий классов.
Возможности и особенности, специфичные для Python:
Языки с поддержкой динамической типизации и объектно-ориентированного программирования обычно не рассматриваются в рамках обобщённого программирования, поскольку задачи обобщённого программирования решаются за счёт отсутствия ограничений на типы данных. В Python обобщённое программирование со строгой типизацией достигается использованием средств языка совместно со внешними анализаторами кода, такими как Mypy.
Несмотря на то, что Python изначально не задумывался как язык функционального программирования, Python поддерживает программирование в стиле функционального программирования, в частности:
Однако, в отличие от большинства языков, непосредственно ориентированных на функциональное программирование, Python не является  и код не защищён от .
В стандартной библиотеке Python существуют специальные пакеты operator и functools для функционального программирования.
Python поддерживает метапрограммирование.
Программное обеспечение (приложение или библиотека) на Python оформляется в виде модулей, которые в свою очередь могут быть собраны в пакеты. Модули могут располагаться как в , так и в . Модули могут быть двух типов по своему происхождению: модули, написанные на «чистом» Python, и модули расширения (extension modules), написанные на других языках программирования. Например, в стандартной библиотеке есть «чистый» модуль pickle и его аналог на Си: cPickle. Модуль оформляется в виде отдельного файла, а пакет — в виде отдельного каталога. Подключение модуля к программе осуществляется оператором import. После импорта модуль представлен отдельным объектом, дающим доступ к пространству имён модуля. В ходе выполнения программы модуль можно перезагрузить функцией reload().
Python поддерживает полную  времени исполнения. Это означает, что для любого объекта можно получить всю информацию о его внутренней структуре.
Применение интроспекции является важной частью того, что называют , и широко применяется в библиотеках и  Python, таких как , PLY, Cherry,  и др., значительно экономя время использующего их программиста.
Необходимые для интроспекции данные хранятся в специальных атрибутах. Так, например, получить все пользовательские атрибуты большинства объектов можно из специального атрибута — словаря (или другого объекта, предоставляющего интерфейс dict) __dict__
Есть также другие атрибуты, имена и назначение которых зависят от объекта:
Подавляющее большинство атрибутов, поддерживающих интроспекцию, является классовым, и их, в свою очередь, можно получить из obj.__class__.__dict__. Часть информации, унаследованную от базового класса, все объекты используют совместно, что позволяет экономить память.
Для удобства получения интроспективной информации в Python есть модуль inspect.
С помощью модуля new возможен обратный процесс — построения объекта из составных частей на этапе исполнения
Обработка исключений поддерживается в Python посредством операторов try, except, else, finally, raise, образующих блок обработки исключения. В общем случае блок выглядит следующим образом:
Совместное использование else, except и finally стало возможно только начиная с Python 2.5. Информация о текущем исключении всегда доступна через sys.exc_info(). Кроме значения исключения, Python также сохраняет состояние стека вплоть до точки возбуждения исключения — так называемый traceback.
В отличие от компилируемых языков программирования, в Python использование исключения не приводит к значительным накладным расходам (а зачастую даже позволяет ускорить исполнение программ) и очень широко используется. Исключения согласуются с философией Python (10-й пункт «» — «Ошибки никогда не должны умалчиваться») и являются одним из средств поддержки «».
Иногда вместо явной обработки исключений удобнее использовать блок  (доступен, начиная с Python 2.5).
В программах на Python широко используются итераторы. Цикл for может работать как с последовательностью, так и с итератором. Большинство коллекций предоставляют итераторы, итераторы могут также определяться пользователем для собственных объектов. Модуль itertools стандартной библиотеки содержит средства работы с итераторами.
Одной из интересных возможностей языка являются генераторы — функции, сохраняющие внутреннее состояние: значения локальных переменных и текущую инструкцию (см. также: ). Генераторы могут использоваться как  для структур данных и для . См. пример: .
При вызове генератора функция немедленно возвращает объект-итератор, который хранит текущую точку исполнения и состояние локальных переменных функции. При запросе следующего значения (посредством метода next(), неявно вызываемого в цикле for) генератор продолжает исполнение функции от предыдущей точки остановки до следующего оператора yield или return.
В Python 2.4 появились генераторные выражения — выражения, дающие в результате генератор. Генераторные выражения позволяют сэкономить память там, где иначе требовалось бы использовать список с промежуточными результатами:
В этом примере суммируются все нечётные числа от 1 до 99.
Начиная с версии 2.5, Python поддерживает полноценные сопроцедуры: теперь в генератор можно передавать значения с помощью метода send() и возбуждать в его контексте исключения с помощью метода throw().
Также Python поддерживает вложенные генераторы. Например, для создания двумерного массива нужно разместить генератор списка, являющегося строкой, внутри генератора всех строк: [[0 for j in range(m)] for i in range(n)]
В Python 2.5 появились средства для управления контекстом выполнения блока кода — оператор with и модуль contextlib. См.: .
Оператор может применяться в тех случаях, когда до и после некоторых действий должны обязательно выполняться некоторые другие действия, независимо от возбуждённых в блоке исключений или операторов return: файлы должны быть закрыты, ресурсы освобождены, перенаправление стандартного ввода вывода закончено и т. п. Оператор улучшает читаемость кода, а значит, помогает предотвращать ошибки.
Декораторы функций — вызываемые объекты, которые принимают другую функцию в качестве аргумента. Декораторы функций могут производить операции с функцией и возвращают либо саму функцию, либо другую заменяющую её функцию или вызываемый объект. То есть, если в коде ранее был прописан декоратор, названный decorate, то следующий код:
эквивалентен этому:
Пример использования декоратора функции:
Существуют декораторы классов.
Формат регулярных выражений унаследован из  с некоторыми отличиями. Для их использования требуется импортировать модуль re, являющийся частью стандартной библиотеки.
Богатая стандартная  является одной из привлекательных сторон Python. Здесь имеются средства для работы со многими  и форматами , например, модули для написания  и клиентов, для разбора и создания почтовых сообщений, для работы с  и т. п. Набор модулей для работы с  позволяет писать кросс-платформенные приложения. Существуют модули для работы с , текстовыми ,  форматами,  протоколами, архивами,  данных, поддержка  и др.
Помимо стандартной библиотеки существует множество библиотек, предоставляющих интерфейс ко всем системным вызовам на разных платформах; в частности, на платформе Win32 поддерживаются все вызовы , а также  в объёме не меньшем, чем у  или . Количество прикладных библиотек для Python в самых разных областях без преувеличения огромно (, , обработка изображений, обработка текста, , приложения  и т. д.).
Для Python принята спецификация программного интерфейса к базам данных  и разработаны соответствующие этой спецификации пакеты для доступа к различным : , , , ,  (), ,  и . На платформе  доступ к БД возможен через  (). Коммерческий пакет mxODBC для доступа к СУБД через  для платформ Windows и  разработан eGenix. Для Python написано много  (, , Dejavu, ), выполнены программные каркасы для разработки веб-приложений (, , ).
Библиотека  для работы с многомерными  позволяет иногда достичь производительности научных расчётов, сравнимой со специализированными пакетами.  использует NumPy и предоставляет доступ к обширному спектру математических алгоритмов (матричная алгебра —  уровней 1—3, , …). Numarray специально разработан для операций с большими объёмами научных данных.
 — интерфейс шлюза с веб-сервером (Python Web Server Gateway Interface).
Python предоставляет простой и удобный программный интерфейс  для написания собственных модулей на языках  и . Такой инструмент как  позволяет почти автоматически получать привязки для использования C/C++ библиотек в коде на Python. Возможности этого и других инструментов варьируются от автоматической генерации (C/C++/Fortran)-Python интерфейсов по специальным файлам (SWIG, pyste, SIP, pyfort), до предоставления более удобных API (boost::python, CXX, Pyhrol и др.). Инструмент стандартной библиотеки  позволяет программам Python напрямую обращаться к /, написанным на Си. Существуют модули, позволяющие встраивать код на С/C++ прямо в исходные файлы Python, создавая расширения «на лету» (pyinline, weave).
Другой подход состоит во встраивании интерпретатора Python в приложения. Python легко встраивается в программы на Java, C/C++, . Взаимодействие Python-приложений с другими системами возможно также с помощью , , , COM.
С помощью проекта  возможна трансляция программ, написанных на языках Python и , в код на языке Си с последующей компиляцией в машинный код. Cython используется для упрощения написания Python-библиотек, при его использовании отмечается ускорение кода и уменьшение накладных расходов.
Экспериментальный проект  предполагает создание компилятора для трансформации неявно типизированных Python-программ в оптимизированный С++ код. Начиная с версии 0.22 Shedskin позволяет компилировать отдельные функции в модули расширений.
Python и подавляющее большинство библиотек к нему бесплатны и поставляются в исходных кодах. Более того, в отличие от многих открытых систем, лицензия никак не ограничивает использование Python в коммерческих разработках и не налагает никаких обязательств, кроме указания авторских прав.
Одним из каналов распространения и обновления пакетов для Python является  ( ).
С Python поставляется библиотека  на основе / для создания кроссплатформенных программ с .
Существуют расширения, позволяющие использовать все основные библиотеки графических интерфейсов — , основанное на библиотеке , PyGObject для ,  и  для  и другие. Некоторые из них также предоставляют широкие возможности по работе с базами данных, графикой и сетями, используя все возможности библиотеки, на которой основаны.
Для создания игр и приложений, требующих нестандартного интерфейса, можно использовать библиотеку . Она также предоставляет обширные средства работы с : с её помощью можно управлять звуком и изображениями, воспроизводить видео. Предоставляемое pygame аппаратное ускорение графики  имеет более высокоуровневый интерфейс по сравнению с PyOpenGL, копирующей семантику С-библиотеки для OpenGL. Есть также PyOgre, обеспечивающая привязку к  — высокоуровневой объектно-ориентированной библиотеке 3D-графики. Кроме того, существует библиотека pythonOCC, обеспечивающая привязку к среде 3D-моделирования и симуляции OpenCascade.
Для работы с  используется библиотека .
Для работы с  используется .
Существуют модули, позволяющие контролировать типы параметров функций на этапе исполнения, например, typecheck или method signature checking decorators. Необязательная декларация типов для параметров функции добавлена в Python 3, интерпретатор при этом не проверяет типы, а только добавляет соответствующую информацию к метаданным функции для последующего использования этой информации модулями расширений.
Перегрузка функций реализована различными сторонними библиотеками, в том числе PEAK. Планы, которые не были приняты, по поддержке перегрузки в Python3000 были частично реализованы в библиотеке overloading-lib.
В статье «»  собраны примеры небольших программ, демонстрирующих некоторые возможности языка Python и его стандартной библиотеки.

Программа «» может быть написана одной строкой:Вычисление  числа 10 (10!):
Реализация с помощью :
В стандартной библиотеке Python имеется  (модуль profile), который можно использовать для сбора статистики о времени работы отдельных функций. Для решения вопроса о том, какой вариант кода работает быстрее, можно использовать модуль timeit. Производимые в следующей программе измерения позволяют выяснить, какой из вариантов  строк более эффективен:
Как и в любом языке программирования, в Python имеются свои приёмы  кода. Оптимизировать код можно исходя из различных (часто конкурирующих друг с другом) критериев (увеличение быстродействия, уменьшение объёма требуемой оперативной памяти, компактность исходного кода и т. д.). Чаще всего программы оптимизируют по времени исполнения.
Здесь есть несколько очевидных для опытных программистов правил.
Python имеет следующие особенности и связанные с ними правила оптимизации.
Инструмент под названием Pychecker поможет проанализировать исходный код на Python и выдать рекомендации по найденным проблемам (например, неиспользуемые имена, изменение сигнатуры метода при его перегрузке и т. п.). В ходе такого статического анализа исходного кода могут быть выявлены и ошибки. Pylint призван решать близкие задачи, но имеет уклон в сторону проверки стиля кода, поиска .
Выбор языка обычно зависит от решаемых задач, особенностей языков и наличия библиотек, требуемых для решения задачи. Одна и та же задача, написанная на разных языках может сильно разниться по эффективности исполнения, в том числе различия могут быть и при исполнении в разных операционных системах или при использовании разных компиляторов. В общем случае языки можно поделить на интерпретируемые (скриптовые), компилируемые в промежуточное представление и компилируемые, что влияет на производительность и потребление памяти. Python принято относить к интерпретируемым. Также отдельные языки могут иметь свои сильные стороны, в случае Python выделяется лёгкость в написании программ.
Python сравнивается с C++/Java с точки зрения лаконичности, простоты и гибкости Python. Можно сравнить «»-программы, записанные на каждом из языков.
Касательно ООП в Python в отличие от C++ и Java отсутствуют модификаторы доступа к полям и методам класса, атрибуты и поля у объектов могут создаваться на лету в ходе исполнения программы, а все методы являются виртуальными. По сравнению с Java Python позволяет также перегружать операторы, что даёт возможность использовать выражения близкие к естественным. В совокупности подход к ООП в Python упрощает программирование, делает код более понятным и одновременно добавляет гибкости языку. С другой стороны, скорость выполнения кода на Python (как и других интерпретируемых языков) значительно ниже, чем скорость выполнения аналогичного кода на C++ и обычно ожидается ниже, чем в Java. Код на C++ получается производительнее Python, при этом занимает больше строк. Согласно исследованиям алгоритов, применяемых в , Python показал себя более гибким чем C++, а Java оказалась компромиссным решением между производительностью C++ и гибкостью Python.
В Java и Python все объекты создаются в , в то время как C++ позволяет создавать объекты как в куче, так и на , в зависимости от используемого синтаксиса. На производительность также влияет способ доступа к данным в памяти. В C++ и Java доступ к данным происходит по постоянным смещениям в памяти, в то время как в Python — через . Использование  в C++ может быть довольно сложным для понимания среди новичков, и овладение навыками правильного использования указателей может занять некоторое время.
Go и Python — кардинально различающиеся языки, тем не менее, они часто сравниваются один с другим из-за общей ниши — бэкэнда веб-приложений. По выражению Джейсона Кинкэйда, Go объединяет «производительность и безопасность компилируемых языков, таких как C++, со скоростью разработки на динамических языках, таких как Python». В какой-то мере это действительно так: Go изначально разработан как строго статически типизированный компилируемый язык, поддерживающий максимум возможностей динамических языков, при котором ещё можно обеспечить эффективную компиляцию и сохранить производительность компилируемых программ.
Общими для обоих языков является использование автоматического управления памятью, наличие встроенных динамических коллекций (массивов и словарей), поддержка срезов, развитый механизм модулей, простой и минималистичный синтаксис. Различий гораздо больше, и не всегда можно однозначно указать, в пользу какого из языков они говорят.
Оба языка являются интерпретируемыми, компилируются в промежуточное представление, которое затем отправляется на исполнение. В случае Python генерируется промежуточный байт-код, а компилятор Perl генерирует синтаксическое дерево. Управление памятью в обоих языках автоматическое, а сами языки используются как скриптовые и хорошо подходят для написания веб-приложений. Подход в написания кода Python предполагает лучшее понимание  в ущерб производительности, тогда как в Perl больше свободы в синтаксисе, что может привести к тому что программы на Perl становятся нечитабельны для программистов, не работающих с данным языком.
Lua — простой язык, исходно разработанный для встраивания в ПО и использования для автоматизации сложных операций (таких, как поведение  в компьютерных играх). Python также может применяться в этих областях, ещё он конкурирует с Lua в написании скриптов автоматизации управления компьютером и операционной системой и в непрофессиональном программировании «на себя». В последние годы оба языка стали встраиваться в мобильные устройства, например, в программируемые калькуляторы.
Оба языка являются динамическими, интерпретируемыми, поддерживают автоматическое управление памятью, имеют стандартные средства взаимодействия с ПО, написанным на других языках (главным образом C и C++). Среда исполнения Lua компактнее и требует для работы меньше ресурсов, чем Python, что даёт Lua преимущество при встраивании. Как и Python, Lua поддерживает компиляцию исходного текста в исполняемый виртуальной машиной байт-код. Существует реализация JIT-компилятора для Lua.
Lua проще, чем Python, и имеет более классический паскалеподобный синтаксис. В языке всего восемь встроенных типов данных, а все структурированные типы (структуры, перечисления, массивы, множества) моделируются на основе единственного встроенного типа «таблица», который фактически является гетерогенным словарём. ООП реализуется на таблицах и строится по прототипной модели, как в JavaScript. Python предоставляет больше возможностей, а его структурированные типы данных имеют каждый свою реализацию, что повышает производительность. Возможности ООП в Python существенно шире, что даёт преимущество при написании сложных программ, но мало влияет на качество и производительность простых скриптов, на которые ориентирован Lua.
Python, MATLAB и R используются в обработке данных и в обучении студентов основам математики и статистики. R является языком для выполнения статистических расчётов, в то время как MATLAB может считаться языком программирования наряду с Python.
Python, как весьма популярный язык программирования, повлиял на следующие языки:
Классический Python имеет общий со многими другими  недостаток — сравнительно невысокую скорость выполнения программ. В некоторой степени ситуацию улучшает сохранение  (расширения .pyc и, до версии 3.5, .pyo), которое позволяет интерпретатору не тратить время на синтаксический разбор текста модулей при каждом запуске.
Существуют реализации языка Python, вводящие высокопроизводительные виртуальные машины (ВМ) в качестве бэкенда компилятора. Примерами таких реализаций может служить , базирующийся на RPython; более ранней инициативой является проект . Ожидается, что использование ВМ типа LLVM приведёт к тем же результатам, что и использование аналогичных подходов для реализаций языка Java, где низкая вычислительная производительность в основном преодолена. Однако нельзя забывать, что динамический характер Python делает неизбежными дополнительные накладные расходы при исполнении программ, что ограничивает производительность Python-систем независимо от применяемых технологий. Вследствие этого для написания критических участков кода используются низкоуровневые языки, интеграция с которыми обеспечивается множеством программ и библиотек (см. выше).
В самой популярной реализации языка Python интерпретатор довольно велик и более требователен к ресурсам, чем в аналогичных популярных реализациях , ,  или , что ограничивает его применение во встроенных системах. Тем не менее, Python портирован на некоторые относительно малопроизводительные платформы.
Интерпретатор Python в  (а также  и ) использует потоко-небезопасные данные, во избежание разрушения которых при совместной модификации из разных потоков применяется глобальная блокировка интерпретатора — GIL (Global Interpreter Lock): в ходе исполнения кода поток интерпретатора блокирует GIL, выполняет в течение фиксированного времени (по умолчанию 5 миллисекунд) некоторое количество инструкций, после чего освобождает блокировку и приостанавливается, давая возможность работать другим потокам. GIL также освобождается во время ввода-вывода, изменения и проверки состояния синхронизирующих примитивов, при исполнении кода расширений, не обращающихся к данным интерпретатора, например, /. Таким образом, в каждый момент времени в одном процессе интерпретатора Python может исполняться только один поток кода на Python, независимо от числа доступных процессорных ядер.
Потери производительности от GIL зависят от характера программ и архитектуры системы. Большинство программ является однопоточными, либо запускает всего несколько потоков, из которых часть в каждый конкретный момент простаивает в ожидании. Персональные компьютеры обычно имеют небольшое количество процессорных ядер, которые загружены параллельно исполняющимися в системе процессами, так что реальные потери производительности на персональных компьютерах из-за GIL невелики. Но в серверных приложениях может быть удобно использовать десятки и сотни (а то и больше) параллельных потоков (например, в системах массового обслуживания, где каждый поток обрабатывает данные для отдельного пользовательского запроса), а серверы на конец 2010-х годов нередко имеют десятки и даже сотни процессорных ядер, то есть технически могут обеспечить этим потокам физически одновременное исполнение; в таких условиях GIL может приводить к действительно значительному снижению общей производительности, так как лишает программу возможности полноценно использовать ресурсы многоядерных систем.
Гвидо ван Россум говорил, что GIL «не так уж и плох» и он будет в CPython до тех пор, пока «кто-то другой» не представит реализацию Python без GIL, с которой бы однопоточные скрипты работали так же быстро.
В задачи разработки входит работа по оптимизации GIL. Отказ от GIL в ближайшем будущем не планируется, так как альтернативные механизмы на однопоточных приложениях, которых большинство, работают медленнее или потребляют больше ресурсов:
Радикальным вариантом решения проблемы может быть переход на  и , работающие на виртуальных машинах Java и .NET/Mono: эти реализации вообще не используют GIL.
Несмотря на то, что одним из заявленных принципов дизайна Python является , критики отмечают целый ряд архитектурных решений, которые могут вводить в заблуждение или вызывать недоумение у программистов, привыкших к другим распространённым языкам. В их числе:
По сравнению с  и некоторыми другими языками, в Python отсутствует возможность модифицировать встроенные классы, такие, как int, str, float, list и другие, что, однако, позволяет Python потреблять меньше оперативной памяти и быстрее работать. Ещё одной причиной введения такого ограничения является необходимость согласования с модулями расширения. Многие модули (в целях оптимизации быстродействия) преобразуют Python-объекты элементарных типов к соответствующим Си-типам вместо манипуляций с ними посредством Си-API. Также это избавляет от многих потенциальных ошибок при неконтролируемом динамическом переопределении встроенных типов.
CPython является основной реализацией языка. Он написан на  и является переносимым на разные платформы. В основе управления памятью лежит использование комбинации счётчиков ссылок и сборщика мусора, ответственного за поиск циклических захватов ссылок. Хотя язык считается интерпретируемым, на самом деле он компилируется в промежуточный высокоуровневый байт-код, который затем исполняется через стековую виртуальную машину. Например, вызов функции print() может быть представлен в следующем виде:
Имена в языке имеют позднее связывание, в результате чего можно писать обращения к переменным, методам и атрибутам, которых ещё нет, но они должны быть объявлены на момент исполнения кода, использующего их. Каждый объект в Python имеет словарь, представленный хеш-таблицей, через который происходит сопоставление названий атрибутов их значениям. Глобальные переменные также сопоставляются через словарь. Одно обращение к методу или атрибуту может сопровождаться поочерёдным поиском в нескольких словарях.
PyPy — реализация Python, написанная на  (подмножество Python, имеющее намного меньше динамических возможностей). Позволяет легко проверять новые возможности. В PyPy, кроме стандартного CPython, включены возможности Stackless, , модификация  «на лету» и многое другое. В проект интегрированы возможности анализа Python-кода и трансляция в другие языки и  виртуальных машин (, , , .NET с версии 0.9.9). Начиная с 0.9.0, возможна полностью автоматическая трансляция RPython в Си, в результате чего достигается скорость, приемлемая для использования (в 2—3 раза ниже, чем CPython при отключённом  для версии 0.9.9). По умолчанию PyPy поставляется со встроенным JIT-компилятором, с помощью которого он способен работать намного быстрее, чем CPython.
Jython — реализация Python, компилирующая код на Python в  , который может быть выполнен . Также может использоваться для импорта , исходный код которого был написан на Java в качестве модуля для Python.
Существуют также другие реализации.
На основе Python было создано несколько специализированных подмножеств языка, в основном предназначенных для статической компиляции в машинный код. Некоторые из них перечислены ниже.

Подобно  и , Python может использоваться в интерактивном режиме, при котором введённые с клавиатуры операторы сразу же выполняются, а результат выводится на экран (). Этот режим удобен как при изучении языка, так и в процессе профессиональной разработки — для быстрого тестирования отдельных фрагментов кода, — так как обеспечивает немедленную обратную связь. Также он позволяет использовать интерпретатор в качестве  с большим набором функций.
Почти все IDE для Python поддерживают  для быстрого тестирования.
Существует несколько специализированных  для разработки на Python.
Помимо этого, существуют плагины для поддержки программирования на Python для универсальных IDE ,  и , а также имеется поддержка подсветки синтаксиса, автодополнения кода и подключения средств отладки и запуска приложений для целого ряда распространённых текстовых редакторов.
Python — стабильный и распространённый язык. Он используется во многих проектах и в различных качествах: как основной язык программирования или для создания расширений и интеграции приложений. На Python реализовано большое количество проектов, также он активно используется для создания прототипов будущих программ.
Python является лёгким в изучении языком, и часто изучается как первый язык, в том числе используется при обучении детей программированию. Как первый язык он хорошо подходит, поскольку программы на нём близки к естественному языку, на котором люди привыкли думать, а для написания корректной программы требуется минимальное количество ключевых слов. В других же языках, таких как , существует большое количество различных синтаксических конструкций и элементов языка, которым приходится уделять внимание вместо изучения алгоритмов.
Являясь приложением с открытым исходным кодом, интерпретатор Python используется по всему миру и поставляется в составе операционных систем на базе Linux, а также в компьютерах от фирмы . Python популярен среди индивидуальных разработчиков, но также используется крупными компаниями в достаточно серьёзных продуктах, ориентированных на получение прибыли. На Python написан . В  также активно применяется Python, а из-за сложностей динамической типизации и огромного количества кода компания перешла к статической типизации с помощью открытого проекта Mypy Также Python активно используется в  и . Многие компании используют Python для тестирования аппаратного обеспечения, среди этих компаний значатся , ,  и .  и  используют его при создании анимационных фильмов.
Язык активно используется компанией  в её поисковой системе, а  в значительной степени написан с использованием Python. Кроме того, Google спонсирует разработку Python с 2010 года, и поддержку , основной системы распространения пакетов для Python.
Сильными сторонами Python являются его модульность и возможность интегрироваться с другими языками программирования, в том числе в составе сложных комплексных приложений и систем. Сочетание простоты и лаконичности с большим количеством возможностей делает Python удобным в качестве . Многие проекты предоставляют прикладной интерфейс программирования на Python для написания скриптов, например, среды 3D-моделирования ,  и , а также свободная геоинформационная система . Некоторые проекты реализуют базовую часть на более производительных языках программирования, а для упрощения работы предоставляют полноценный интерфейс прикладного программирования на Python. Так, движок свободного   реализован в виде библиотеки libopenshot, написанной на C++ с использованием библиотек на Си, а все возможности полностью покрыты прикладным интерфейсом программирования Python.  использует Python для анализа данных, а  использует его при выполнении научных задач. Из инструментов, используемых в NASA, можно отметить свободный графический симулятор сети , который также хорошо зарекомендовал себя в корпоративной среде и используется в технологических компаниях, например, в . На Python написана также свободная популярная программа нарезки 3D моделей для печати на 3D-принтерах .
Python с пакетами ,  и  активно используется как универсальная среда для научных расчётов в качестве замены распространённым специализированным коммерческим пакетам, таким как , предоставляя аналогичную функциональность и более низкий порог вхождения. По большей части на Python написана также графическая программа , позволяющая создавать качественные графики, готовые для размещения в научных публикациях. Библиотека  — популярный инструмент для астрономических расчётов.
Также Python подходит для выполнения нестандартных или сложных задач в  проектов, что обусловлено отсутствием необходимости предварительной компиляции исходных файлов. В проекте  он используется для генерации исходного кода  для классов языка .
Интерпретатор Python может использоваться в качестве мощной командной оболочки и скриптового языка для написания командных файлов ОС. Лёгкость обращения из Python-скриптов к внешним программам и наличие библиотек, дающих доступ к управлению системой, делают Python удобным инструментом для системного администрирования. Он широко используется для этой цели на платформе Linux: обычно Python поставляется с системой, во многих дистрибутивах инсталляторы и визуальный интерфейс системных утилит написаны именно на Python. Используется он и в администрировании других Unix-систем, в частности, в  и .  самого языка и библиотек делает его привлекательным для унифицированной автоматизации задач системного администрирования в гетерогенных средах, где совместно применяются компьютеры с операционными системами различных типов.
Будучи языком общего назначения Python применим почти во всех сферах деятельности. Фактически Python используется практически любой солидной компанией тем или иным образом как для выполнения текущих задач, так и в тестировании, администрировании или в разработке программных продуктов.
